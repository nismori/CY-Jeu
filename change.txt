Monde 2 Niveau 5 :
    -Les Niveaux 1 à 5 sont utilisés pour créer des niveaux facilement et ne sont pas fait pour être pris comme argument. Un niveau pouvant être pris comme argument doit avoir un fichier texte contenant : 
        -Le nom
        -Le score
        -La vie
        -Le niveau (de taille supérieur à 9x19 car on y place des pièces. On pourrait ne pas placer de pièces, mais le jeu se terminerait instantanément (plus de pièces = VICTOIRE)). Ne pas oublier de mettre un 1 dans le Niveau
        -Deux lignes vides après le niveau
        -Idéalement, le meilleur moyen de créer un niveau valide serait de modifier la classe niveau tout en conservant cette contrainte de 9x19 pour les pièces, puis de jouer une partie avec un argument inexistant. A la fin de cette partie, le jeu sauvegardera la partie dans le nouveau fichier argument.
        -Les fichiers niveauBob.txt et niveauLaura.txt sont des niveaux valides
    -Les messages d'erreurs ont été modifiés pour être plus explicites


Monde 2 Niveau 6:
    -Ajout de code dans le main et de fichiers pour lancer un .jar avec un argument
    -Modifications : Main.java, Deplacement/Joueur/Deplacement/Niveau.class et META-INF


Monde 3 Niveau 1:
    -Ajout du score pour le Joueur et de pièces dans le Niveau
    -Le score est sauvegardé dans le fichier texte contenant le Niveau
    -Le Niveau est terminé quand le Joueur a collecté toutes les pièces
    -Modifications : 
        -Main.java : Pour executer les nouvelles fonctionnalités
        -Joueur.java : Classe Joueur (score), resetScore()
        -Niveau.java : Classe Niveau (pièces), getPiece(), isFinishPiece(), saveFile(), loadFile(), numberOfPieces()
        -Deplacement.java : Movement() avec (int x, String fileName) (affiche VICTOIRE et sauvegarde le niveau quand on récupère toutes les pièces)
    

Monde 3 Niveau 2: 
    -Ajout de la vie et de la position par défaut pour le Joueur et de pièces dans le Niveau 
    -Le joueur perd une vie quand il prend une pièce et est remis à sa position par défaut
    -On met GAME OVER quand le joueur n'a plus de vies
    -Modifications : 
        -Main.java : Pour executer les nouvelles fonctionnalités
        -Joueur.java : Classe Joueur (vies), getDefaultX(), getDefaultY(), setDefaultXandY(), getLife(), removeLife(), setLife()
        -Niveau.java : Class Niveau(pièges), isPiege() getPiege(), isFinishPiege(), saveFile(), loadFile(), numberOfPieges()
        -Deplacement.java : Movement() avec (int x, String fileName) (affiche GAME OVER et sauvegarde le niveau quand le joueur n'a plus de vies)


Monde 3 Niveau 3:
    -Deux modes de lancement:
        -Mode "par défaut" où le joueur a un argument dans le Main.jar. Tout ce qu'on a eu avant avec la sauvegarde du Joueur dans le Niveau
        -Mode avec plusieurs niveaux où le joueur n'a pas d'argument
    -Dans le mode avec plusieurs niveaux, le joueur enchaîne les niveaux 1 à 5. Ces derniers sont chargés depuis le fichiers texte correspondant.
    -On demande le nom du Joueur avant de commencer les niveaux et on l'attribue au nom du Joueur.
    -Si il meurt, on lui propose de recommencer depuis le niveau 1 avec le score et la vie reinitialisés.
    -Si il arrive au bout du niveau 5, on le remercie
    -Modifications:
        -Main.java : Pour executer les nouvelles fonctionnalités et attribuer au Joueur le nom que l'utilisateur a créé
        -Niveau.java : loadNiveau(), Retry(), loadGame()
        -Deplacement.java : Movement() avec (int x, String fileName) (Création des deux modes de lancement)
        -Niveau1/2/3/4/5.txt et readme
